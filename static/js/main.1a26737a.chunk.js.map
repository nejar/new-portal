{"version":3,"sources":["logo.svg","components/common/CustomButton.js","components/Header.js","components/Content.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CustomButton","props","onClick","handleClick","btnText","Header","handleOnClick","console","log","this","Component","Content","state","data","name","age","id","map","user","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uKAAAA,EAAOC,QAAU,IAA0B,kC,0ICM5BC,MAJf,SAAsBC,GACpB,OAAO,4BAAQC,QAASD,EAAME,aAAcF,EAAMG,UCkBrCC,EAlBf,4MACEC,cAAgB,WACdC,QAAQC,IAAI,mBAFhB,uDAMI,OACE,sCAEE,kBAAC,EAAD,CACEJ,QAAQ,gBACRD,YAAaM,KAAKH,qBAX5B,GAA4BI,aCyCbC,EA1Cf,kDACE,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,KAAM,CACJ,CAAEC,KAAM,QAASC,IAAK,GAAIC,GAAI,KAC9B,CAAEF,KAAM,OAAQC,IAAK,GAAIC,GAAI,KAC7B,CAAEF,KAAM,SAAUC,IAAK,GAAIC,GAAI,KAC/B,CAAEF,KAAM,QAASC,IAAK,GAAIC,GAAI,OAPtB,EADhB,qDAeI,OADAT,QAAQC,IAAIC,KAAKG,OAEf,6BACE,+BACE,+BACE,4BACE,oCACA,mCACA,mCAGDH,KAAKG,MAAMC,KAAKI,KAAI,SAACC,GAAD,OACnB,4BACE,4BAAKA,EAAKJ,MACV,4BAAKI,EAAKH,KACV,4BAAKG,EAAKF,QAGd,4BACE,qCAjCd,GAA6BN,aCkBdS,MATf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCHcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.1a26737a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nfunction CustomButton(props) {\r\n  return <button onClick={props.handleClick}>{props.btnText}</button>;\r\n}\r\n\r\nexport default CustomButton;\r\n","import React, { Component } from \"react\";\r\nimport CustomButton from \"./common/CustomButton\";\r\n\r\nexport class Header extends Component {\r\n  handleOnClick = () => {\r\n    console.log(\"i am in header\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        Header\r\n        <CustomButton\r\n          btnText=\"Header Button\"\r\n          handleClick={this.handleOnClick}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class Content extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      data: [\r\n        { name: \"Nejar\", age: 26, id: \"1\" },\r\n        { name: \"raja\", age: 26, id: \"1\" },\r\n        { name: \"praksh\", age: 26, id: \"1\" },\r\n        { name: \"suraj\", age: 26, id: \"1\" },\r\n      ],\r\n    };\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state);\r\n    return (\r\n      <div>\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Age</th>\r\n              <th>Id</th>\r\n            </tr>\r\n\r\n            {this.state.data.map((user) => (\r\n              <tr>\r\n                <td>{user.name}</td>\r\n                <td>{user.age}</td>\r\n                <td>{user.id}</td>\r\n              </tr>\r\n            ))}\r\n            <tr>\r\n              <td></td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport CustomButton from \"./components/common/CustomButton\";\nimport Content from \"./components/Content\";\n\nconst handleOnClick = () => {\n  console.log(\"i am in app\");\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Content />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}